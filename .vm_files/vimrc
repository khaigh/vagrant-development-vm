" Environment {
    " Initial Settings {
       set nocompatible
       set background=dark
    " }

    " Platform Compatibility {
       set shell=/bin/bash
       if has("unix")
           let s:uname = system("uname")
           if s:uname == "Linux\n"
               set backspace=2
           endif
       endif
       if !has('gui_running')
           let g:solarized_termtrans=1
       endif
       if has('win32') || has('win64')
           set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
       endif
    " }

    " Bundle Support {
        call pathogen#infect()
    " }
" }

" General {
    filetype plugin indent on "Automatically detect file types
    syntax on "Syntax highlighting
    set mouse=a "Automatically enable mouse usage
    set number
    set backup
    autocmd! bufwritepost .vimrc source %
    set history=1000
    set virtualedit=onemore
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
" }

" Formatting {
    set tabstop=4
    set shiftwidth=4
    set nowrap
    set smartindent
    set autoindent
    set expandtab
    set pastetoggle=<F12>
    set clipboard=unnamed
    au InsertLeave * set nopaste
" }

" Vim UI {
    colorscheme solarized
    set t_Co=256
    set wildmenu
    set completeopt=menuone,preview,longest
    set ruler
    set cursorline
    set whichwrap=b,s,h,l,<,>,[,]
    set hlsearch
    set incsearch
    set showmatch
    set foldmethod=indent
    set nofoldenable
    set list
    set listchars=tab:>.,trail:.,extends:#,nbsp:.
    autocmd BufEnter * :syntax sync fromstart
    autocmd QuickFixCmdPost [^l]* nested cwindow
    autocmd QuickFixCmdPost    l* nested lwindow

    hi Pmenu guifg=#000000 guibg=#f8f8f8 ctermfg=black ctermbg=Lightgray
    hi PmenuSbar guifg=#8A95A7 guibg=#f8f8f8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
    hi PmenuThumb guifg=#f8f8f8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE
" }


" Filetype Specific {
    " reStructuredText {
        au BufRead *.rst setlocal expandtab shiftwidth=4 tabstop=8 smartindent
    " }

    " go {
        autocmd BufWritePre *.go Fmt " go fmt on save
        abbrev gobi :!go build -v . ./... && go install . ./...<CR>
        map <buffer> <S-e> :w<CR>:!go run % <CR>
        map <buffer> <S-b> :w<CR>:!go build % <CR>
        autocmd FileType go set omnifunc=gocomplete#Complete
    " }

    " css {
        autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    " }

    " html {
        autocmd FileType html,markdown set omnifunc=htmlcomplete#CompleteTags
    " }

    " javascript {
        autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    " }

    " xml {
        autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
    " }
" }


" General Key Binding {
    map <C-j> <C-W>j
    map <C-k> <C-W>k
    map <C-h> <C-W>h
    map <C-l> <C-W>l
    nnoremap <F2> :NERDTreeToggle<CR>
    nnoremap <F3> :TagbarToggle<CR>
    nmap <K> :Godoc<CR>
    map <F6> :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>
    nnoremap <F8> :!/opt/local/bin/ctags -R --python-kinds=-i *.py<CR>
    inoremap <Nul> <C-x><C-o>

    " For local replace
    nnoremap gr gd[{V%:s/<C-R>///gc<left><left><left>

    " For global replace
    nnoremap gR gD:%s/<C-R>///gc<left><left><left>

    "For a better popup
    inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"

    inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
      \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

    inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
      \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

    cmap w!! w !sudo tee % >/dev/null
" }

" General Shortcuts {
    abbrev spell setlocal spell spelllang=en_us<CR>
" }


" Plugins {
    " NERDTree {
         "autocmd VimEnter * NERDTree " Start NERDTree on startup
         autocmd BufEnter * NERDTreeMirror
         autocmd VimEnter * wincmd w
    " }

    " javascript indent {
         let g:html_indent_inctags = "html,body,head,tbody"
         let g:html_indent_script1 = "inc"
         let g:html_indent_style1 = "inc"
    " }

    " vim-godef {
         let g:godef_split=2
    " }

    " Vim Ctrl - P {
         let g:ctrlp_map = '<c-p>'
         let g:ctrlp_cmd = 'CtrlP'
         let g:ctrlp_working_path_mode = 'ra'
         let g:ctrlp_custom_ignore = {
                     \ 'dir':  '\v[\/]\.(git|hg|svn)$',
                     \ 'file': '\v\.(exe|so|dll)$',
                     \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
                     \ }
    " }

    " Tagbar with go tags {
        let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
                \ 'p:package',
                \ 'i:imports:1',
                \ 'c:constants',
                \ 'v:variables',
                \ 't:types',
                \ 'n:interfaces',
                \ 'w:fields',
                \ 'e:embedded',
                \ 'm:methods',
                \ 'r:constructor',
                \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
                \ 't' : 'ctype',
                \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
                \ 'ctype' : 't',
                \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
        \ }
    " }

    " multiple cursors {
        let g:multi_cursor_use_default_mapping=0
        let g:multi_cursor_next_key='<C-n>'
        let g:multi_cursor_prev_key='<C-o>'
        let g:multi_cursor_skip_key='<C-x>'
        let g:multi_cursor_quit_key='<Esc>'
    " }
    "
    " SuperTab {
        let g:SuperTabDefaultCompletionType = "context"
    " }
" }

function! InitializeDirectories()
  let separator = "."
  let parent = $HOME 
  let prefix = '.vim'
  let dir_list = { 
              \ 'backup': 'backupdir', 
              \ 'views': 'viewdir', 
              \ 'swap': 'directory' }

  for [dirname, settingname] in items(dir_list)
      let directory = parent . '/' . prefix . dirname . "/"
      if exists("*mkdir")
          if !isdirectory(directory)
              call mkdir(directory)
          endif
      endif
      if !isdirectory(directory)
          echo "Warning: Unable to create backup directory: " . directory
          echo "Try: mkdir -p " . directory
      else  
          let directory = substitute(directory, " ", "\\\\ ", "")
          exec "set " . settingname . "=" . directory
      endif
  endfor
endfunction
call InitializeDirectories()
